package main

import (
	"encoding/json"
	"fmt"

	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
	"gorm.io/gorm/logger"
)

type Product struct {
	gorm.Model
	ID int
	Code  string
	Price uint
	Title string
}

func (p Product) BeforeDelete(tx *gorm.DB) (err error) {
	fmt.Printf("Start delete: %v", p.ID)
	return;
}

func main() {
	db, err := gorm.Open(sqlite.Open("test.db"), &gorm.Config{
		Logger: logger.Default.LogMode(logger.Info),
	})
	if err != nil {
		panic("failed to connect database")
	}

	// Migrate the schema
	db.AutoMigrate(&Product{})

	var product Product
	//db.Debug().Unscoped().Delete(&product)
	db.Where("title = ?", "").Delete(&Product{})

	// Create
	db.Create(&Product{Code: "D42", Price: 100, Title: "Item 1"})
	db.Create(&Product{Code: "D43", Price: 150, Title: "Item 3"})
	db.Create(&Product{Code: "D45", Price: 400})

	// Read
	// db.First(&product, 4)                 // find product with integer primary key
	db.First(&product, "code = ?", "D42") // find product with code D42

	// Update - update product's price to 200
	// db.Model(&product).Update("Price", 200)
	// // Update - update multiple fields
	// db.Model(&product).Updates(Product{Price: 200, Code: "F42"}) // non-zero fields
	// db.Model(&product).Updates(map[string]interface{}{"Price": 200, "Code": "F42"})
	
	// Delete - delete product
	//db.Delete(&product, 1)

	marsh, _ := json.MarshalIndent(product, "", "	")
	fmt.Println("")
	fmt.Println(string(marsh))
}
